#!/bin/bash

# Author: Ben Ackerman
# Purpose: Emulate basic DOS/Windows commands in Linux/UNIX with improved structure
# Last Revision Date: 2023-11-8

# Define variables
COMMAND="$1"
SOURCE="$2"
DESTINATION="$3"

# Define the usage function
usage() {
    echo "Usage: dosutil <command> [options]"
    echo "Supported commands:"
    echo "  author        - Output your name"
    echo "  type <file>   - Output the content of a file"
    echo "  copy <source> <destination> - Copy a file or directory"
    echo "  ren <source> <destination>  - Rename a file or directory"
    echo "  move <source> <destination> - Move a file or directory"
    echo "  del <file>    - Delete a file or directory without confirmation"
    echo "  help          - Show this help message"
    exit 1
}

# Define a function to check if a file or directory exists
file_exists() {
    if [ -e "$1" ]; then
        if [ -d "$1" ]; then
            echo "Directory"
        else
            echo "File"
        fi
    else
        echo "Not Found"
    fi
}

# Function to verify source
verify_source() {
    local source="$1"

    local source_type="$(file_exists "$source")"

    if [ "$source_type" == "Not Found" ]; then
        echo "Error: Source file/directory '$source' not found."
        exit 1
    fi
}

# Function to verify destination
verify_dest() {
    local destination="$1"

    local destination_type="$(file_exists "$destination")"

    if [ -n "$destination" ] && [ "$destination_type" == "Not Found" ]; then
        echo "Error: Destination file/directory '$destination' not found."
        exit 1
    fi

    if [ -n "$destination" ] && [ "$destination_type" != "Not Found" ]; then
        echo "Error: Destination file/directory '$destination' already exists."
        exit 1
    fi
}

# Function to verify that the destination doesn't exist
verify_no_dest() {
    local destination="$1"

    local destination_type="$(file_exists "$destination")"

    if [ "$destination_type" != "Not Found" ]; then
        echo "Error: Destination file/directory '$destination' already exists."
        exit 1
    fi
}

# Function to perform actions interactively
interactive_mode() {
    local files=($(ls))
    PS3="Select a file/directory: "
    select file in "${files[@]}"; do
        if [ -n "$file" ]; then
            PS3="Select a command: "
            select cmd in "type" "copy" "ren" "del" "move" "help" "copy!" "move!" "ren!"; do
                case $cmd in
                    "type"|"del"|"help")
                        handle_command "$cmd" "$file"
                        ;;
                    "copy"|"ren"|"move"|"copy!"|"ren!"|"move!")
                        read -p "Enter destination: " destination
                        handle_command "$cmd" "$file" "$destination"
                        ;;
                    *)
                        echo "Invalid command."
                        ;;
                esac
                break
            done
        fi
        break
    done
}

# Function to execute UNIX commands and verify their success
run_command() {
    local command="$1"
    local source="$2"
    local destination="$3"

    local source_type="$(file_exists "$source")"
    local destination_type="$(file_exists "$destination")"

    # Display the UNIX command about to be executed
    echo
    echo "UNIX command ran: $command $source $destination"
    echo

    # Execute the UNIX command
    eval "$command $source $destination"

    if [ $? -eq 0 ]; then
        echo "Command completed successfully."
    else
        echo "Command failed to execute."
    fi
}


# handles translation from UNIX to DOS
function handle_command() {
    case "$COMMAND" in
        "author")
            echo "Ben Ackerman"
            ;;

        "type")
            if [ -z "$SOURCE" ]; then
                echo "Error: Please provide a file name for 'type' command."
                usage
            else
                verify_source "$SOURCE"
                cat "$SOURCE"
            fi
            ;;

        "copy")
            if [ -z "$SOURCE" ] || [ -z "$DESTINATION" ]; then
                echo "Error: 'copy' command requires source and destination filenames."
                usage
            else
                verify_source "$SOURCE"
                verify_no_dest "$DESTINATION"
                run_command "cp" "$SOURCE" "$DESTINATION"
            fi
            ;;

        "ren")
            if [ -z "$SOURCE" ] || [ -z "$DESTINATION" ]; then
                echo "Error: 'ren' command requires source and destination filenames."
                usage
            else
                verify_source "$SOURCE"
                verify_no_dest "$DESTINATION"
                run_command "mv" "$SOURCE" "$DESTINATION"
            fi
            ;;

        "move")
            if [ -z "$SOURCE" ] || [ -z "$DESTINATION" ]; then
                echo "Error: 'move' command requires source and destination filenames."
                usage
            else
                verify_source "$SOURCE"
                verify_no_dest "$DESTINATION"
                run_command "mv" "$SOURCE" "$DESTINATION"
            fi
            ;;

        "del")
            if [ -z "$SOURCE" ]; then
                echo "Error: Please provide a filename for 'del' command."
                usage
            else
                verify_source "$SOURCE"
                run_command "rm -r" "$SOURCE"
            fi
            ;;

        "help")
            usage
            ;;

        *)
            echo "Error: Invalid command '$COMMAND'."
            usage
            ;;
			
		# SPECIAL CASES
		
		"move!")
            if [ -z "$SOURCE" ] || [ -z "$DESTINATION" ]; then
                echo "Error: 'move' command requires source and destination filenames."
                usage
            else
                verify_source "$SOURCE"
                run_command "mv -f" "$SOURCE" "$DESTINATION"
            fi
            ;;
			
        "ren!")
            if [ -z "$SOURCE" ] || [ -z "$DESTINATION" ]; then
                echo "Error: 'ren' command requires source and destination filenames."
                usage
            else
                verify_source "$SOURCE"
                run_command "mv -f" "$SOURCE" "$DESTINATION"
            fi
            ;;
			
        "copy!")
            if [ -z "$SOURCE" ] || [ -z "$DESTINATION" ]; then
                echo "Error: 'copy' command requires source and destination filenames."
                usage
            else
                verify_source "$SOURCE"
                run_command "cp -f" "$SOURCE" "$DESTINATION"
            fi
            ;;
    esac
}

# Implement DOS/Windows command emulation
if [ -z "$COMMAND" ]; then
    interactive_mode
else
	handle_command
fi

exit 0
